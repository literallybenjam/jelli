/*

#  Jelli Game Engine  #

Compiled from CoffeeScript.
In several parts ;)

*/

//  Screen:

// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Screen;

  Screen = function(canvas, context) {
    var doc;
    if (context == null) {
      context = "2d";
    }
    if (!(canvas instanceof HTMLCanvasElement)) {
      doc = document;
      canvas = doc.getElementById(canvas);
      if (!(canvas instanceof HTMLCanvasElement)) {
        canvas = void 0;
      }
    } else {
      doc = canvas.ownerDocument;
    }
    this.canvas = canvas;
    this.context = canvas ? canvas.getContext(context) : void 0;
    this.ownerDocument = doc;
    Object.defineProperties(this, {
      height: {
        get: function() {
          if (this.canvas) {
            return this.canvas.height;
          }
        },
        set: function(n) {
          if (this.canvas) {
            return this.canvas.height = n;
          }
        }
      },
      width: {
        get: function() {
          if (this.canvas) {
            return this.canvas.width;
          }
        },
        set: function(n) {
          if (this.canvas) {
            return this.canvas.width = n;
          }
        }
      }
    });
    return Object.freeze(this);
  };

  Screen.prototype = {
    clear: function() {
      if (!(this.canvas instanceof HTMLCanvasElement)) {
        return;
      }
      if (this.context instanceof CanvasRenderingContext2D) {
        return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      } else if (this.context instanceof WebGLRenderingContext) {
        return this.context.clear(this.context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);
      }
    }
  };

  Object.freeze(Screen.prototype);

  window.Screen = Screen;

}).call(this);

//  Control:

// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Control,
    slice = [].slice;

  Control = function(doc) {
    if (doc == null) {
      doc = document;
    }
    this.controls = {};
    this.ownerDocument = !(doc instanceof Document) ? document : doc;
    this.keys = {};
    Object.freeze(this);
    doc.defaultView.addEventListener("keydown", this, false);
    return doc.defaultView.addEventListener("keyup", this, false);
  };

  Control.prototype = {
    add: function(name) {
      if (name == null) {
        return;
      }
      this.controls[name] = false;
      return this;
    },
    addKeys: function() {
      var i, key, keys, len, name;
      name = arguments[0], keys = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!((name != null) && (this.controls[name] != null))) {
        return;
      }
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        this.keys[key] = name;
      }
      return this;
    },
    getName: function(key) {
      if (!((key != null) && (this.keys[key] != null))) {

      } else {
        return this.keys[key];
      }
    },
    handleEvent: function(e) {
      var i, j, key, len, len1, ref, ref1;
      if (!(e instanceof Event)) {
        return;
      }
      switch (e.type) {
        case "keydown":
          ref = [e.code, e.key, e.keyIdentifier, e.keyCode];
          for (i = 0, len = ref.length; i < len; i++) {
            key = ref[i];
            if (this.isKeyDefined(key)) {
              this.toggleKey(key, true);
            }
          }
          break;
        case "keyup":
          ref1 = [e.code, e.key, e.keyIdentifier, e.keyCode];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            key = ref1[j];
            if (this.isKeyDefined(key)) {
              this.toggleKey(key, false);
            }
          }
      }
    },
    isActive: function(name) {
      if (!((name != null) && (this.controls[name] != null))) {

      } else {
        return !!this.controls[name];
      }
    },
    isDefined: function(name) {
      if (name == null) {

      } else {
        return controls[name] != null;
      }
    },
    isActive: function(key) {
      var name;
      if (!((key != null) && ((name = this.keys[key]) != null) && (this.controls[name] != null))) {

      } else {
        return !!this.controls[name];
      }
    },
    isDefined: function(key) {
      var name;
      if (!((key != null) && ((name = this.keys[key]) != null))) {

      } else {
        return this.controls[name] != null;
      }
    },
    remove: function(name) {
      if (name == null) {
        return;
      }
      delete this.controls[name];
      return this;
    },
    removeKeys: function() {
      var i, key, keys, len;
      keys = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        delete this.keys[key];
      }
      return this;
    },
    toggle: function(name, to) {
      if (to == null) {
        to = !this.controls[name];
      }
      if (!((name != null) && (this.controls[name] != null))) {

      } else {
        return this.controls[name] = !!to;
      }
    },
    toggleKey: function(key, to) {
      var name;
      if (to == null) {
        to = !this.controls[this.keys[key]];
      }
      if (!((key != null) && (name = this.keys[key]) && this.controls[name])) {

      } else {
        return controls[name] = !!to;
      }
    }
  };

  Object.freeze(Control.prototype);

  window.Control = Control;

}).call(this);
